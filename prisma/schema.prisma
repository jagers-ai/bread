// Prisma schema for BREAD MVP
// 3 tables: Ingredient, Recipe, RecipeIngredient

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 재료 테이블
model Ingredient {
  id           String   @id @default(cuid())
  name         String   // "버터", "밀가루" 등
  unit         String   // "g", "ml", "개" 등
  pricePerUnit Decimal  @db.Decimal(10, 2) // 정확한 금액 계산을 위한 Decimal 타입
  
  // 새로운 필드 (모두 optional로 migration 안전성 확보)
  category     String?  // 대분류: "유제품", "곡물" 등
  subcategory  String?  // 소분류: "버터류", "밀가루류" 등  
  brand        String?  // 브랜드: "서울우유", "백설" 등
  quantity     Decimal? @db.Decimal(10, 2) // 수량: 1000, 500 등
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // 관계 - 이 재료를 사용하는 레시피들
  recipes RecipeIngredient[]
  
  @@map("ingredients")
}

// 레시피 테이블
model Recipe {
  id         String   @id @default(cuid())
  name       String   // "휘낭시에", "크로와상" 등
  yieldCount Int      @default(1) // 1회 제작 시 생산량 (개수)
  
  // 베이킹 정보 (모두 optional로 기존 데이터와 호환)
  baker            String?  // 제빵사
  moldSize         String?  // 틀사이즈 (예: "22cm 원형틀")
  ovenTemp         Int?     // 오븐 온도 (°C)
  ovenTime         Int?     // 오븐 시간 (분)
  fermentationInfo String?  // 발효/벤치/휴지 정보
  sellingPrice     Decimal? @db.Decimal(10, 2) // 판매가격
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // 관계 - 이 레시피에 필요한 재료들
  ingredients RecipeIngredient[]
  
  @@map("recipes")
}

// 레시피-재료 중간 테이블 (다대다 관계)
model RecipeIngredient {
  id           String  @id @default(cuid())
  recipeId     String
  ingredientId String
  quantity     Decimal @db.Decimal(10, 2) // 사용량 (예: 50.5g)
  
  // 관계
  recipe     Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id])
  
  // unique constraint 제거 - 같은 재료를 여러 번 사용 가능 (예: 반죽용, 토핑용)
  @@map("recipe_ingredients")
}